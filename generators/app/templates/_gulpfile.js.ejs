// generated on <%= date %> using <%= name %> <%= version %>


const $ = require('gulp-load-plugins')({ pattern: ['gulp-*'] });

const pkg = require('./package.json');
const dotenv = require('dotenv').config();
<%_ if (projectType === 'bedrock' || projectType === 'craft') { -%>
const site_hostname = new URL(<%_ if (projectType === 'bedrock') { -%>
    process.env.WP_HOME
  <%_ } else if (projectType === 'craft') { -%>
    process.env.PRIMARY_SITE_URL
  <%_ } -%>).hostname;
<%_ } -%>

// Set environment based on .env variable
<%_ if (projectType === 'bedrock') { -%>
process.env.NODE_ENV = (process.env.WP_ENV === 'dev' || process.env.WP_ENV === 'development') ? 'development' : 'production';
<%_ } else { -%>
process.env.NODE_ENV = (process.env.ENVIRONMENT === 'dev' || process.env.ENVIRONMENT === 'development') ? 'development' : 'production';
<%_ } -%>


const gulp                      = require('gulp'),
      fs                        = require('fs'),
      through2                  = require('through2'),
      log                       = require('fancy-log'),
      colors                    = require('colors'),
      path                      = require('path'),
      del                       = require('del'),
      webpack                   = require('webpack'),
      webpackStream             = require('webpack-stream'),
      browserSync               = require('browser-sync').create(),
      critical                  = require('critical'),
      PromisePool               = require('es6-promise-pool'),

      // temporary folder
      temp_folder               = '.tmp',

      // Paths to source of assets
      src_folder                = pkg.paths.srcFolder,
      src_asset_scss            = pkg.globs.src.scss,
      src_asset_js              = pkg.globs.src.js,
      src_asset_img             = pkg.globs.src.images,
      src_asset_font            = pkg.globs.src.fonts,
      <%_ if (projectType === 'html') { -%>
      src_asset_html            = pkg.globs.src.html,
      <%_ } -%>
      // Add any other assets that just need to be copied over to dist folder
      src_generic_assets        = pkg.globs.src.genericAssets,

      // Paths you want to output assets to
      dist_folder               = pkg.paths.distFolder, // change to whatever root you want it to be.
      dist_css                  = pkg.globs.dist.css,
      dist_js                   = pkg.globs.dist.js,
      dist_img                  = pkg.globs.dist.images,
      dist_font                 = pkg.globs.dist.fonts,
      dist_html                 = <% if (projectType === 'html') { %>pkg.globs.dist.html<% } else { %>pkg.paths.templatesFolder<% } %>,

      critical_css              = pkg.paths.criticalCss;

// Set colors node logging color theme
colors.setTheme({
    silly: 'rainbow',
    input: 'grey',
    verbose: 'cyan',
    prompt: 'grey',
    info: 'green',
    infoBg: ['bgGreen', 'white'],
    data: 'grey',
    help: 'magenta',
    helpBg: ['bgMagenta', 'white'],
    warn: 'yellow',
    warnBg: ['bgYellow', 'black'],
    debug: 'magenta',
    error: 'red',
    errorBg: ['white', 'bgRed']
});


// Log and format message related to any build tasks
function buildLog(_log) {

    // let source = log.source || undefined;
    let message = '';
    let sourceInfo = ' => '.data;

    switch(_log.type) { 

        case 'error':
            message += '[BUILD ERROR]'.errorBg.bold;
            sourceInfo += colors.error.bold(_log.source);
            break;

        case 'warning':
            message += '[BUILD WARNING]'.warnBg.bold;
            sourceInfo += colors.warn.bold(_log.source);
            break;

        case 'info':
            message += '[BUILD INFO]'.infoBg.bold;
            sourceInfo += colors.info.bold(_log.source);
            break;

        default:
            message += '[BUILD MESSAGE]'.helpBg.bold;
            sourceInfo += colors.help.bold(_log.source);
    }

    sourceInfo += ' responded with:\n'.data;

    message += _log.source ? sourceInfo : '';
    message += _log.message ? _log.message : '';

    switch(_log.type) { 

        case 'error':
            log.error(message);
            break;

        case 'warning':
            log.warn(message);
            break;

        case 'info': 
            log.info(message);
            break;

        default:
            log.info(message);
    }
}

// Test if NODE_ENV production
const isProd = process.env.NODE_ENV === 'production';


// For busting cache in serviceworker through version number
function makeid() {
  return Math.random().toString(36).substr(2, 9);
}

const dist_generic_assets = [];

// Copy paths in src_generic_assets, add to dist_generic_assets 
// array but replace src_folder in path to be dist_folder. (e.g. 
// "/src/videos/loremipsum.mp4" becomes "/dist/videos/loremipsum.mp4")
// This is used to clean files copied over from 'generic-assets' task. 
src_generic_assets.forEach((el) => {
  dist_generic_assets.push(el.replace(src_folder, dist_folder));
});


// Clean frontend assets that were generated from gulp workflow
function clean() {

  <%_ if (projectType === 'html') { -%>
  const files_to_clean = [dist_css, dist_js, dist_img, dist_font, temp_folder].concat(dist_generic_assets);
  <%_ } else { -%>
  const files_to_clean = [ dist_folder, temp_folder ];
  <%_ } -%>

  const flat_files_to_clean = files_to_clean.flat();

  buildLog({
    type: 'info',
    source: 'gulp clean',
    message: `Deleting:\n ${colors.info(flat_files_to_clean)}`
  });

  return del(flat_files_to_clean);
}

exports.clean = clean;


// Copy over any generic assets that are in src_generic_assets to dist_folder
function genericAssets(done) {

  if(src_generic_assets.length > 0) {
    gulp.src(src_generic_assets, {
      allowEmpty: true,
    })
      .pipe(gulp.dest(dist_folder))
      .pipe(browserSync.stream())
  }

  done();

}


// Copy and run images through gulp-imagemin then output to dist_img
gulp.task('images', () => {
  return gulp.src(src_asset_img, { since: gulp.lastRun('images') })
    .pipe($.plumber())
    .pipe($.imagemin([
      $.imagemin.gifsicle({interlaced: true}),
      $.imagemin.mozjpeg({quality: 75, progressive: true}),
      $.imagemin.optipng({optimizationLevel: 5}),
      $.imagemin.svgo({
          plugins: [
              {removeViewBox: true},
              {cleanupIDs: false}
          ]
      })
    ]))
    .pipe($.size({showFiles: true}))
    .pipe(gulp.dest(dist_img))
    .pipe(browserSync.stream());
});


// Generate icon svg sprite
function icons(done) {
  gulp.src(pkg.globs.src.icons)
    .pipe($.svgSprite({
      shape: {
        dimension: { // Set maximum dimensions
          maxWidth: 50,
          maxHeight: 50
        },
        spacing: { // Add padding
          padding: 0
        },
        dest: 'out/intermediate-svg' // Keep the intermediate files
      },
      mode: {
        symbol: true // Activate the «symbol» mode
      }
    }))
    .pipe(gulp.dest(pkg.globs.dist.icons));

  done();
}

exports.icons = icons;


function fonts(done) {
  gulp.src(src_asset_font, {since: gulp.lastRun('fonts')})
    .pipe(gulp.dest(dist_font));

  done();
}

exports.fonts = fonts;

<%_ if (projectType === 'html') { -%>


function html(done) {
  gulp.src(src_asset_html, {
      base: src_folder,
      since: gulp.lastRun('html')
    })
    .pipe(gulp.dest(dist_folder));

  done();
}

exports.html = html;
<%_ } -%>

function injectCssJss(done) {
  const cssFolder = dist_css.map(item => path.join(item, '**/*.css'));
  const jsFolder = dist_js.map(item => path.join(item, '**/*.js'));

  const sources = gulp.src([cssFolder, jsFolder].flat(), {read: false});

  gulp.src(dist_html)
    .pipe($.inject(sources, {
      ignorePath: dist_folder
    }))
    .pipe(gulp.dest(dist_folder))
    .pipe(browserSync.stream());

  done();
}
<%_ if (includeTailwind) { -%>

function exportTailwindConfig() {
  return gulp.src('./tailwind.config.js')
      .pipe($.tailwindcssExportConfig({
          output: '_tailwind.config.scss',
          format: 'scss',
          quotedKeys: true,
      }))
      .pipe(gulp.dest(path.join(src_folder, '/scss/.tmp/imports')));
}
<%_ } -%>

function postcss(done) {
  const f = $.filter(['.tmp/css/**/*.css'], {restore: true});

  gulp.src(['.tmp/css/**/*.*'])
    .pipe($.plumber({
      errorHandler: function(err) {
        buildLog({ 
          type: 'error',
          source: err.plugin, 
          message: err.message 
        });
        this.emit('end');
      }
    }))
    .pipe(f)
    .pipe($.if(!isProd, $.sourcemaps.init({loadMaps: true})))
    .pipe($.postcss([
          <%_ if (includeTailwind) { -%>
          require('tailwindcss'),
          <%_ } -%>
          require('autoprefixer'),
          isProd ? require('cssnano')({ preset: 'default' }) : false
        ].filter(Boolean)))
    .pipe($.if(!isProd, $.sourcemaps.write()))
    .pipe(f.restore)
    .pipe($.if(isProd, $.rename({ suffix: '.min' })))
    .pipe($.size({showFiles: true}))
    .pipe(gulp.dest(dist_css))
    .pipe(browserSync.stream());

  done();
}


function sass() {
  return gulp.src(src_asset_scss)
    .pipe($.dependents())
    .pipe($.if(!isProd, $.sourcemaps.init()))      
    .pipe($.dartSass().on('error', function(err) {
      buildLog({ 
        type: 'error',
        source: err.plugin, 
        message: err.message 
      })
      this.emit('end');
    }))
    .pipe($.if(!isProd, $.sourcemaps.write()))
    .pipe(gulp.dest('.tmp/css'));
}


gulp.task('css', gulp.series(<%_ if (includeTailwind) { -%>exportTailwindConfig, <% } -%>sass, postcss));


// Lint JavaScript
function lintJs(done) {
  const f = $.filter(['**', '!**/vendor/**/*.js']);

  gulp.src(src_asset_js, { since: gulp.lastRun(lintJs) })
    .pipe(f)
    .pipe($.eslint())
    .pipe($.eslint.format())
    .pipe($.if(!browserSync.active, $.eslint.failAfterError()));

  done();
}


function webpackJs() {
  return gulp.src(src_asset_js, { since: gulp.lastRun(webpackJs) })
    .pipe($.plumber())
    .pipe(webpackStream(require('./webpack.config.js'), webpack ))
    .pipe(gulp.dest(dist_js));
}

function vendorJs(done) {
  const f = $.filter(['**/vendor/**/*.js']);

  gulp.src(src_asset_js, { since: gulp.lastRun(vendorJs) })
    .pipe($.plumber())
    .pipe(f)
    .pipe(gulp.dest(dist_js));

  done();
}

gulp.task('js', gulp.series(lintJs, gulp.parallel(webpackJs, vendorJs)));


// service worker compile and copy
gulp.task('service-worker', function () {
  return gulp.src(path.join(src_folder, 'sw.js'))
    .pipe($.replace(/@@pwa-version@@/gm, 'version-' + makeid()))
    .pipe($.if(isProd, $.replace(/styles\.css/g, 'styles.min.css')))
    .pipe($.if(isProd, $.replace(/main\.js/g, 'main.min.js')))
    .pipe(gulp.dest(dist_folder))
});


// Generate the icons. This task takes a few seconds to complete.
// You should run it at least once to create the icons. Then,
// you should run it whenever RealFaviconGenerator updates its
// package (see the check-for-favicon-update task below).

// File where the favicon markups are stored
const favicon = pkg.favicon.image;
const FAVICON_DATA_FILE = path.join(__dirname, 'faviconData.json');
const theme_color = pkg.favicon.themeColor;
const favicon_bg = pkg.favicon.backgroundColor;

gulp.task('generate-favicon', function(done) {
  $.realFavicon.generateFavicon({
    masterPicture: favicon,
    dest: dist_folder,
    iconsPath: '/',
    design: {
      ios: {
        pictureAspect: 'noChange',
        assets: {
          ios6AndPriorIcons: false,
          ios7AndLaterIcons: false,
          precomposedIcons: false,
          declareOnlyDefaultIcon: true
        }
      },
      desktopBrowser: {
        design: 'raw'
      },
      windows: {
        pictureAspect: 'noChange',
        backgroundColor: favicon_bg,
        onConflict: 'override',
        assets: {
          windows80Ie10Tile: false,
          windows10Ie11EdgeTiles: {
            small: false,
            medium: true,
            big: false,
            rectangle: false
          }
        }
      },
      androidChrome: {
        pictureAspect: 'noChange',
        themeColor: theme_color,
        manifest: {
          name: '<%= appname %>',
          startUrl: '/',
          display: 'standalone',
          orientation: 'notSet',
          onConflict: 'override',
          declared: true
        },
        assets: {
          legacyIcon: false,
          lowResolutionIcons: false
        }
      }
    },
    settings: {
      scalingAlgorithm: 'Mitchell',
      errorOnImageTooSmall: false,
      readmeFile: false,
      htmlCodeFile: true,
      usePathAsIs: false
    },
    markupFile: FAVICON_DATA_FILE
  }, function() {
    // Patch the original manifest
    done();
  });
});


// Inject the favicon markups in your HTML pages. You should run
// this task whenever you modify a page. You can keep this task
// as is or refactor your existing HTML pipeline.
gulp.task('inject-favicon-markups', function() {
  return gulp.src(dist_html)
    .pipe($.realFavicon.injectFaviconMarkups(JSON.parse(fs.readFileSync(FAVICON_DATA_FILE)).favicon.html_code))
    .pipe(gulp.dest(dist_folder));
});


// Check for updates on RealFaviconGenerator (think: Apple has just
// released a new Touch icon along with the latest version of iOS).
// Run this task from time to time. Ideally, make it part of your
// continuous integration system.
gulp.task('check-for-favicon-update', function(done) {
  var currentVersion = JSON.parse(fs.readFileSync(FAVICON_DATA_FILE)).version;
  $.realFavicon.checkForUpdates(currentVersion, function(err) {
    if (err) {
      throw err;
    }
  });

  done();
});


gulp.task('browser-sync', (done) => {
  browserSync.init({
    <%_ if (projectType === 'html') { -%>
    server: {
      baseDir: [ dist_folder ]
    },
    open: true,
    <%_ } else if (projectType === 'craft' || projectType === 'bedrock')  { -%>
    host: site_hostname,
    proxy: site_hostname,
    open: false,
    <%_ } -%>
    port: 3000,
    snippetOptions: {
      <%_ if (projectType === 'html') { -%>
      rule: {
        match: /<head[^>]*>/i,
        fn: function(snippet, match) {
          return match + snippet;
        }
      }
      <%_ } else if (projectType === 'craft' || projectType === 'bedrock') { -%>
      rule: {
          match: /<\/body>/i,
          fn: function (snippet, match) {
              return snippet + match;
          }
      }
      <%_ } -%>
    }
  });

  done();
});


// Reload browsersync and fire callback.
function reloadAndDone(done) {

  browserSync.reload();

  done();

}


gulp.task('watch', (done) => {
  
  buildLog({
    source: 'watch task',
    message: '          -> Watching files in /src folder...'.magenta.bold
  });

  <%_ if (projectType === 'html') { -%>
  gulp.watch(src_asset_html, gulp.series(html, 'css', injectCssJss)).on('done', browserSync.reload);
  <%_ } -%>
  <%_ if (includeTailwind) { -%>
  gulp.watch('tailwind.config.js', gulp.series('css'));
  <%_ } -%>
  gulp.watch(src_asset_scss, gulp.series('css'));
  gulp.watch(src_asset_js, gulp.series('js', reloadAndDone));
  gulp.watch(src_asset_img, gulp.series('images', reloadAndDone));
  gulp.watch(pkg.globs.src.icons, gulp.series(icons, reloadAndDone));
  gulp.watch(src_asset_font, gulp.series('fonts', reloadAndDone));

  <%_ if (projectType === 'craft' || projectType === 'bedrock') { -%>
  gulp.watch(pkg.paths.templatesFolder, gulp.series('css', reloadAndDone));
  <%_ } -%>

  done();
});

gulp.task('build', 
  gulp.series(
    clean, 
    gulp.parallel(
      genericAssets,
      <%_ if (projectType === 'html') { -%>
      html,
      <%_ } -%>
      'service-worker', 
      'images', 
      icons,
      fonts, 
      'css', 
      'js', 
      'generate-favicon'
    ), 
    injectCssJss,
    'inject-favicon-markups'
  )
);

gulp.task('serve',
  gulp.series(
    clean,
    gulp.parallel(
      genericAssets, 
      <%_ if (projectType === 'html') { -%>
      html,
      <%_ } -%>
      'images',
      icons, 
      fonts, 
      'css', 
      'js'
    ),
    injectCssJss,
    gulp.parallel(
      'browser-sync', 
      'watch'
    )
  )
);

// Pages to generate critical css from
const criticalPages = pkg.paths.criticalPages;

// Generate critical css based on path to pages
gulp.task('critical', gulp.series('build', function (done) {

  // constructing array out of list-object returned by config.yaml so I can pop each item.
  var pages = Object.keys(criticalPages).map(function (val) {
    return { key: val, url: criticalPages[val] };
  });

  // Modified example code from promiseProducer docs
  var promiseProducer = function () {
    const page = pages.pop();
    if (!page) {
      return null;
    }

    // critical.generate returns a Promise.
    return critical.generate({
      base: dist_folder,
      src: process.env.PRIMARY_SITE_URL + page.url,
      styleTarget: path.join(critical_css, page.key + '.css'),
      minify: true,
      dimension: [{
          // iPhone 6
          width: 375,
          height: 667
        }, {
          // iPhone 6+
          width: 414,
          height: 736
        }, {
          width: 1920,
          height: 1080
        }],
      ignore: ['@font-face']
    })
  }

  // The number of promises to process simultaneously.
  var concurrency = 3

  var pool = new PromisePool(promiseProducer, concurrency)

  var poolPromise = pool.start();

  poolPromise.then(function () {
    
    buildLog({
      type: 'info',
      source: 'critical css task',
      message: colors.info('All critical css files generated')
    });

    done();

  }, function (error) {
    
    buildLog({
      type: 'error',
      source: error.plugin,
      message: 'Failed to generate all/some critical css files: ' + error.message
    });

  })

}));

gulp.task('default', gulp.series('build'));
